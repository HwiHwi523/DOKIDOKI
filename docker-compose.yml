version: "3.8"

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: dockerfile
    
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    restart: always
    stdin_open: true
    tty: true
    networks:
      dokidoki_net:
        ipv4_address: 172.20.153.3


  database_redis:
    container_name: database_redis
    image: redis
    command: ["redis-server", "--appendonly", "yes", "--replica-read-only", "no","--requirepass", "qhBb3Ht7Psvz54PCjlAw", "--notify-keyspace-events", "KEx"]
    networks:
      - dokidoki_net
    restart: always
    ports:
      - 6379:6379

  api-gateway-server:
    container_name: api-gateway-server
    build:
      context: ./backend/api-gateway
      dockerfile: dockerfile
    restart: always
    stdin_open: true
    tty: true
    networks:
      dokidoki_net:
        ipv4_address: 172.20.128.2


  bid-server:
    container_name: bid-server
    build:
      context: ./backend/bid
      dockerfile: dockerfile
    volumes:
      - /var/log/springboot/bid/system:/var/log/springboot/bid
      - /var/log/springboot/bid/access:/logs
    restart: always
    networks:
      - dokidoki_net

  auction-server:
    container_name: auction-server
    build:
      context: ./backend/auction
      dockerfile: dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${DATABASE_URL}
      SPRING_DATASOURCE_USERNAME: ${DATABASE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET_KEY}
    volumes:
      - /var/log/springboot/auction/system:/var/log/springboot/auction
      - /var/log/springboot/auction/access:/logs
    restart: always
    networks:
      - dokidoki_net

  user-server:
    container_name: user-server
    build:
      context: ./backend/user-server
      dockerfile: dockerfile
    volumes:
      - /var/log/springboot/user/system:/var/log/springboot/user
      - /var/log/springboot/user/access:/logs
    environment:
      SPRING_DATASOURCE_URL: ${DATABASE_URL}
      SPRING_DATASOURCE_USERNAME: ${DATABASE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
      CLOUD_AWS_S3_BUCKET: ${S3_BUCKET}
      CLOUD_AWS_CREDENTIALS_ACCESS-KEY: ${S3_ACCESS_KEY}
      CLOUD_AWS_CREDENTIALS_SECRET-KEY: ${S3_SECRET_KEY}
      OAUTH2_GOOGLE_CLIENT_ID: ${GOOGLE_OAUTH_CLIENT_ID}
      OAUTH2_GOOGLE_CLIENT_SECRET: ${GOOGLE_OAUTH_CLIENT_SECRET}
      OAUTH2_KAKAO_CLIENT_ID: ${KAKAO_OAUTH_CLIENT_ID}
      OAUTH2_KAKAO_CLIENT_SECRET: ${KAKAO_OAUTH_CLIENT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_SECRET: ${JWT_SECRET_KEY}
      JWT_ACCESS-EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}

    restart: always
    networks:
      - dokidoki_net

  notice-server:
    container_name: notice-server
    build:
      context: ./backend/notice
      dockerfile: dockerfile
    volumes:
      - /var/log/springboot/notice/system:/var/log/springboot/notice
      - /var/log/springboot/notice/access:/logs
    restart: always
    networks:
      dokidoki_net:
        ipv4_address: 172.20.128.7

  # kafaka 독립 서버
  stream-server:
    container_name: stream-server
    build:
      context: ./backend/streaming
      dockerfile: dockerfile
    restart: always
  
networks:
  dokidoki_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
